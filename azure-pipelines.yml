trigger:
- main

pool:
  name: 'Azuredevopspool'  # Ensure this is your self-hosted Linux agent pool

steps:
- script: |
    if [ -d "/home/Terraform" ]; then
        rm -rf /home/Terraform
    fi
    mkdir -p /home/Terraform
    curl -LO "https://releases.hashicorp.com/terraform/1.1.0/terraform_1.1.0_linux_amd64.zip"
    unzip terraform_1.1.0_linux_amd64.zip -d /home/Terraform
    echo "##vso[task.setvariable variable=PATH]$PATH:/home/Terraform"
  displayName: 'Install Terraform'

- script: |
    terraform --version
  displayName: 'Verify Terraform Version'

- script: |
    if ! command -v az &> /dev/null; then
        curl -sL https://aka.ms/InstallAzureCLIDeb | sudo bash
    fi
    az --version
  displayName: 'Install and Verify Azure CLI'

- task: TerraformTaskV2
  displayName: 'Terraform Init'
  inputs:
    provider: 'azurerm'
    command: 'init'
    workingDirectory: '$(Build.SourcesDirectory)'
    backendServiceArm: 'azureterraform'  # Ensure this service connection exists

- script: |
    terraform fmt -check -diff
  displayName: 'Terraform Format Check'

- script: |
    terraform validate
  displayName: 'Terraform Validate'

- task: TerraformTaskV2
  displayName: 'Terraform Plan'
  inputs:
    provider: 'azurerm'
    command: 'plan'
    workingDirectory: '$(Build.SourcesDirectory)'
    backendServiceArm: 'azureterraform'
    commandOptions: '-out=tfplan'

- task: TerraformTaskV2
  displayName: 'Terraform Apply'
  inputs:
    provider: 'azurerm'
    command: 'apply'
    workingDirectory: '$(Build.SourcesDirectory)'
    backendServiceArm: 'azureterraform'
    commandOptions: '-auto-approve tfplan'
