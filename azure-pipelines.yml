trigger:
  - main  # Runs when code is pushed to 'main' branch

pool:
  vmImage: 'Azuredevopspool'  # Use a Linux agent

variables:
  terraformVersion: '1.6.0'  # Set the Terraform version
  serviceConnection: 'AzureDevOps-Terraform'  # Name of the service connection
  workingDirectory: 'terraform'  # Terraform directory path

stages:
- stage: Terraform_Build
  displayName: "Terraform Build and Validation"
  jobs:
  - job: Terraform_Build_Job
    displayName: "Terraform Initialization and Validation"
    steps:

    # Install Terraform
    - task: TerraformInstaller@1
      displayName: "Install Terraform"
      inputs:
        terraformVersion: $(terraformVersion)

    # Initialize Terraform
    - task: TerraformTaskV4@4
      displayName: "Terraform Init"
      inputs:
        provider: 'azurerm'
        command: 'init'
        workingDirectory: $(workingDirectory)
        backendType: 'azurerm'
        environmentServiceNameAzureRM: $(serviceConnection)

    # Validate Terraform Code
    - task: TerraformTaskV4@4
      displayName: "Terraform Validate"
      inputs:
        provider: 'azurerm'
        command: 'validate'
        workingDirectory: $(workingDirectory)

    # Terraform Plan (Preview Changes)
    - task: TerraformTaskV4@4
      displayName: "Terraform Plan"
      inputs:
        provider: 'azurerm'
        command: 'plan'
        workingDirectory: $(workingDirectory)
        environmentServiceNameAzureRM: $(serviceConnection)
        commandOptions: '-out=tfplan'

    # Publish Terraform Plan Artifact
    - task: PublishBuildArtifacts@1
      displayName: "Publish Terraform Plan"
      inputs:
        artifactName: 'terraform_plan'
        pathToPublish: '$(workingDirectory)/tfplan'

- stage: Terraform_Deploy
  displayName: "Terraform Apply"
  dependsOn: Terraform_Build
  condition: succeeded()
  jobs:
  - deployment: Terraform_Apply_Job
    displayName: "Terraform Apply to Azure"
    environment: 'Production'
    strategy:
      runOnce:
        deploy:
          steps:

          # Install Terraform
          - task: TerraformInstaller@1
            displayName: "Install Terraform"
            inputs:
              terraformVersion: $(terraformVersion)

          # Download Terraform Plan Artifact
          - task: DownloadBuildArtifacts@0
            displayName: "Download Terraform Plan"
            inputs:
              artifactName: 'terraform_plan'
              downloadPath: $(Pipeline.Workspace)

          # Apply Terraform Changes
          - task: TerraformTaskV4@4
            displayName: "Terraform Apply"
            inputs:
              provider: 'azurerm'
              command: 'apply'
              workingDirectory: $(workingDirectory)
              environmentServiceNameAzureRM: $(serviceConnection)
              commandOptions: '$(Pipeline.Workspace)/terraform_plan/tfplan'
